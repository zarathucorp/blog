{
  "hash": "551e401f91c9a04717aaadc36149d358",
  "result": {
    "markdown": "---\ntitle: \"생존분석 실습\"\ndescription: Kaplan-meier curve, 비례위험가정 확인, Time-dependent analysis 그리고  모수적 생존분석을 중심으로 R 코드를 정리했습니다. 본 내용은 성균관의대 사회의학교실 특강에서 실습할 예정입니다.\nimage: https://miro.medium.com/max/1200/1*EIPoC4ogJ9aNX1Kh5kIOTQ.png\ncategories:\n  - presentation\n  - R\n  - shiny\n  - docker\nauthor:\n  - name: Jinseob Kim\n    url: https://github.com/jinseob2kim\n    affiliation: Zarathu Co.,Ltd\n    affiliation_url: https://www.zarathu.com\ndate: 10-31-2020\ndraft: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n<style type=\"text/css\">\ndetails:hover { cursor: pointer }\n</style>\n\n\n\n\n\n\n[김진섭](https://github.com/jinseob2kim) 대표는 [성균관의대 사회의학교실 김종헌 교수님](http://www.skkumed.ac.kr/intro2_lab1_con.asp?prof_id=5872&dept_code=1700) 수업에 참가, Kaplan-meier curve, 비례위험가정 및 모형적합도, Time-dependent covariate 그리고 모수적 생존분석을 중심으로 R 코드를 실습할 예정입니다. \n\n\n\n## 요약 \n\n- 자체 개발한 **[jskm](https://github.com/jinseob2kim/jskm)** 패키지로 kaplan-meier 그림을 그린다.\n\n- **Log-log plot, Observed-expected plot** 으로 비례위험가정을 확인 후, `cox.zph` 함수로 p-value 를 구한다. \n\n- `anova` 로 여러 모형의 log-likelohood 를 비교하고, `step` 으로 AIC 기반 최적모형을 고를 수 있다.\n\n- Time-dependent analysis 는 **(1) 비례위험가정이 깨졌을 때, (2) 반복측정 공변량이 있을 때** 수행한다.\n\n- 모수적 생존분석은 생존함수 $S(t)$ 를 구할 수 있어 예측모형을 만들 수 있다.\n\n\n## Kaplan-meier plot\n\nKaplan-meier plot 은 R 기본 plot에서도 제공하지만, **[survminer](https://github.com/kassambara/survminer)** 패키지의 `ggsurvplot` 함수에서 다양한 옵션을 제공한다. 본 실습에서는 본사가 개발한 **[jskm](https://github.com/jinseob2kim/jskm)** 패키지의 `jskm` 함수를 **survival** 패키지 내장 데이터 [**veteran**](https://www.rdocumentation.org/packages/survival/versions/3.2-7/topics/veteran) 에 적용하겠다. 우선 패키지를 불러온 후 `survfit` 으로 구간별 생존율을 구하자.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(DT);library(survival);library(jskm)\ndatatable(veteran, rownames = F, caption = \"Example data\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-aa9fb32a6fff1767247f\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-aa9fb32a6fff1767247f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Example data<\\/caption>\",\"data\":[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\"],[72,411,228,126,118,10,82,110,314,100,42,8,144,25,11,30,384,4,54,13,123,97,153,59,117,16,151,22,56,21,18,139,20,31,52,287,18,51,122,27,54,7,63,392,10,8,92,35,117,132,12,162,3,95,177,162,216,553,278,12,260,200,156,182,143,105,103,250,100,999,112,87,231,242,991,111,1,587,389,33,25,357,467,201,1,30,44,283,15,25,103,21,13,87,2,20,7,24,99,8,99,61,25,95,80,51,29,24,18,83,31,51,90,52,73,8,36,48,7,140,186,84,19,45,80,52,164,19,53,15,43,340,133,111,231,378,49],[1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[60,70,60,60,70,20,40,80,50,70,60,40,30,80,70,60,60,40,80,60,40,60,60,30,80,30,50,60,80,40,20,80,30,75,70,60,30,60,80,60,70,50,50,40,40,20,70,40,80,80,50,80,30,80,50,80,50,70,60,40,80,80,70,90,90,80,80,70,60,90,80,80,50,50,70,70,20,60,90,30,20,70,90,80,50,70,60,90,50,30,70,20,30,60,40,30,20,60,70,80,85,70,70,70,50,30,40,40,40,99,80,60,60,60,60,50,70,10,40,70,90,80,50,40,40,60,70,30,60,30,60,80,75,60,70,80,30],[7,5,3,9,11,5,10,29,18,6,4,58,4,9,11,3,9,2,4,4,3,5,14,2,3,4,12,4,12,2,15,2,5,3,2,25,4,1,28,8,1,7,11,4,23,19,10,6,2,5,4,5,3,4,16,5,15,2,12,12,5,12,2,2,8,11,5,8,13,12,6,3,8,1,7,3,21,3,2,6,36,13,2,28,7,11,13,2,13,2,22,4,2,2,36,9,11,8,3,2,4,2,2,1,17,87,8,2,5,3,3,5,22,3,3,5,8,4,4,3,3,4,10,3,4,4,15,4,12,5,11,10,1,5,18,4,3],[69,64,38,63,65,49,69,68,43,70,81,63,63,52,48,61,42,35,63,56,55,67,63,65,46,53,69,68,43,55,42,64,65,65,55,66,60,67,53,62,67,72,48,68,67,61,60,62,38,50,63,64,43,34,66,62,52,47,63,68,45,41,66,62,60,66,38,53,37,54,60,48,52,70,50,62,65,58,62,64,63,58,64,52,35,63,70,51,40,69,36,71,62,60,44,54,66,49,72,68,62,71,70,61,71,59,67,60,69,57,39,62,50,43,70,66,61,81,58,63,60,62,42,69,63,45,68,39,66,63,49,64,65,64,67,65,37],[0,10,0,10,10,0,10,0,0,0,0,10,0,10,10,0,0,0,10,0,0,0,10,0,0,10,0,0,10,10,0,0,0,0,0,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,10,0,0,0,10,0,0,0,0,10,0,10,0,0,0,0,0,10,10,10,0,0,10,0,10,0,10,0,0,0,0,0,0,10,0,0,10,0,10,0,10,0,0,0,10,10,0,0,0,0,0,0,0,0,0,10,0,0,10,0,0,0,10,0,0,0,0,0,0,0,0,10,0,0,0,0,10,10,0,0,10,10,0,0,10,0,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>trt<\\/th>\\n      <th>celltype<\\/th>\\n      <th>time<\\/th>\\n      <th>status<\\/th>\\n      <th>karno<\\/th>\\n      <th>diagtime<\\/th>\\n      <th>age<\\/th>\\n      <th>prior<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,2,3,4,5,6,7]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n```{.r .cell-code}\nsfit <- survfit(Surv(time, status) ~ trt, data = veteran)\nsummary(sfit, times = c(100, 200, 300, 365), extend = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall: survfit(formula = Surv(time, status) ~ trt, data = veteran)\n\n                trt=1 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n  100     34      34   0.5020  0.0606       0.3962        0.636\n  200     12      19   0.1947  0.0501       0.1176        0.322\n  300      5       6   0.0885  0.0371       0.0390        0.201\n  365      4       1   0.0708  0.0336       0.0279        0.180\n\n                trt=2 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n  100     21      45    0.333  0.0578       0.2367        0.467\n  200     13       7    0.216  0.0517       0.1354        0.345\n  300      8       4    0.146  0.0454       0.0797        0.269\n  365      6       2    0.110  0.0407       0.0530        0.227\n```\n:::\n:::\n\n\n**trt 1** 은 \"Standard\", **2** 는 \"Test\" 이며 `jskm` 을 적용하면 아래와 같다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njskm(sfit)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n라벨을 수정하고, risk table 과 log-rank p-value 를 추가하자. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njskm(sfit, ystrataname = \"Treat\", ystratalabs = c(\"Standard\", \"Test\"), table = T, pval = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n십자가 무늬는 실제 censoring 이 발생한 부분이며 `mark = F` 로 숨길 수 있다. 생존율이 아닌 누적발생률을 %로 보는 코드는 아래와 같다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njskm(sfit, ystrataname = \"Treat\", ystratalabs = c(\"Standard\", \"Test\"), table = T, pval = T, \n     marks = F, cumhaz = T, surv.scale = \"percent\" )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=768}\n:::\n:::\n\n\np-value 위치는 `pval.coord` legend 위치는 `legendposition` 옵션을 이용한다. 선을 흑백으로 바꾸려면 `linecols = \"black\"` 을 추가한다. `legendposition` 은 x,y 값 모두 0~1 scale 임을 주의하자.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njskm(sfit, ystrataname = \"Treat\", ystratalabs = c(\"Standard\", \"Test\"), table = T, pval = T, \n     marks = F, pval.coord = c(100, 0.1), legendposition = c(0.85, 0.6), linecols = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n마지막으로 특정 시간을 기준으로 나누어보는 landmark analysis 옵션을 소개한다. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njskm(sfit, ystrataname = \"Treat\", ystratalabs = c(\"Standard\", \"Test\"), table = T, pval = T, \n     marks = F, cut.landmark = 365)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n## 연속변수의 최적 cut-off 구하기\n\n**[maxstat](https://cran.r-project.org/web/packages/maxstat/maxstat.pdf)** 패키지를 이용한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(maxstat)\nmtest <- maxstat.test(Surv(time, status) ~ karno, data = veteran, smethod = \"LogRank\")\nmtest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMaximally selected LogRank statistics using none\n\ndata:  Surv(time, status) by karno\nM = 4.6181, p-value = NA\nsample estimates:\nestimated cutpoint \n                40 \n```\n:::\n\n```{.r .cell-code}\ncut <- mtest$estimate\nveteran$karno_cat <- factor(as.integer(veteran$karno >= cut))\n\nsfit2 <- survfit(Surv(time, status) ~ karno_cat, data = veteran)\njskm(sfit2, ystrataname = \"Karno\", ystratalabs = paste(c(\"<\", \"≥\"), cut), table = T, pval = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\n## 비례위험가정 확인\n\nLogrank test, Cox model 로 추정할 때 비례위험을 가정하므로 이것이 깨지면 큰일이다. 본 글에서는 비례위험가정을 확인하는 그림 2개와 테스트를 소개한다. 자세한 내용은 [https://3months.tistory.com/357?category=743476](https://3months.tistory.com/357?category=743476) 를 참고하기 바란다.\n\n\n### Log-log plot\n\n$\\log(t)$ 와 $\\log(-\\log(S(t)))$ 관계를 그림으로 보는 방법이다. 왜 로그를 이용하는지는 모수적 생존분석에서 이야기하겠다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(sfit, fun=\"cloglog\", lty=1:2, col=c(\"Black\", \"Grey50\"), lwd=2, font.lab=2, main=\"Log-log KM curves by Treat\", \n     ylab=\"log-log survival\", xlab=\"Time (log scale)\")\nlegend(\"bottomright\",lty=1:2,legend=c(\"Standard\", \"Test\"), bty=\"n\", lwd=2, col=c(\"Black\", \"Grey50\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n두 선이 평행한지 확인하면 되고 **직선인지 곡선인지는 상관없다**. 모수적 생존분석에서 다룰 weibull 모형에서는 직선인지도 확인해야 한다.  \n\n\n### Observed-expected plot\n\n비례위험을 가정하는 cox model 예상과 비교하는 방법이다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(sfit, lty=\"dashed\", col=c(\"Black\", \"Grey50\"), lwd=2, font=2, font.lab=2, main=\"Observed Versus Expected Plots by Treat\", \n     ylab=\"Survival probability\", xlab=\"Time\")\npar(new = T)\n\n#expected\nexp <- coxph(Surv(time, status) ~ trt, data = veteran)\nnew_df <- data.frame(trt = c(1, 2))\nkmfit.exp <- survfit(exp, newdata = new_df)\nplot(kmfit.exp, lty = \"solid\", col=c(\"Blue\", \"Red\"), lwd=2, font.lab=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n### Goodness of fit\n\n`cox.zph` 함수로 통계검정을 수행한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncox.zph(exp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       chisq df    p\ntrt     3.54  1 0.06\nGLOBAL  3.54  1 0.06\n```\n:::\n\n```{.r .cell-code}\nplot(cox.zph(exp), var = \"trt\")\nabline(h = 0, lty = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n선이 시간 상관없이 일정할수록, 즉 **x축과 평행할수록 비례위험가정을 만족**한다고 판단한다. 위 그림은 x축과 평행은 아니지만 경향성이 있다고 볼수도 없는 애매한 느낌이며 p 는 0.06 이다.\n\n\n## 모형 비교 \n\nCox 모형에서 얻은 log-likelihood 값으로 여러 모형을 비교할 수 있다. 모형들은 **n수가 전부 동일** 해야 비교 가능하므로, 에러 나올땐 먼저 결측치를 확인하자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexp$loglik\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -505.4491 -505.4442\n```\n:::\n\n```{.r .cell-code}\nexp2 <- coxph(Surv(time, status) ~ trt + age, data = veteran)\nexp3 <- coxph(Surv(time, status) ~ trt + age + celltype, data = veteran)\n\nanova(exp, exp2, exp3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Deviance Table\n Cox model: response is  Surv(time, status)\n Model 1: ~ trt\n Model 2: ~ trt + age\n Model 3: ~ trt + age + celltype\n   loglik   Chisq Df P(>|Chi|)    \n1 -505.44                         \n2 -505.14  0.6162  1    0.4325    \n3 -492.43 25.4161  3 1.264e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\n`step` 함수를 이용, **AIC 기반 최적 모형**을 고를 수 있다. **scope** 옵션으로 빠지면 안 될 변수를 미리 정한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstep(exp3, scope = list(lower = ~ 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStart:  AIC=994.86\nSurv(time, status) ~ trt + age + celltype\n\n           Df     AIC\n- age       1  993.04\n- trt       1  993.65\n<none>         994.86\n- celltype  3 1014.27\n\nStep:  AIC=993.04\nSurv(time, status) ~ trt + celltype\n\n           Df     AIC\n- trt       1  992.05\n<none>         993.04\n- celltype  3 1012.89\n\nStep:  AIC=992.05\nSurv(time, status) ~ celltype\n\n           Df     AIC\n<none>         992.05\n- celltype  3 1010.90\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ncoxph(formula = Surv(time, status) ~ celltype, data = veteran)\n\n                    coef exp(coef) se(coef)     z        p\ncelltypesmallcell 1.0013    2.7217   0.2535 3.950 7.83e-05\ncelltypeadeno     1.1477    3.1510   0.2929 3.919 8.90e-05\ncelltypelarge     0.2301    1.2588   0.2773 0.830    0.407\n\nLikelihood ratio test=24.85  on 3 df, p=1.661e-05\nn= 137, number of events= 128 \n```\n:::\n:::\n\n\n\n## Time-dependent analysis\n\n자세한 내용은 [https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf](https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf) 를 참고하기 바란다.\n\n\n### 비례위험가정 깨졌을 때 (time-dependent coefficients)  \n\n어떤 공변량이 비례위험가정을 만족하지 않을 경우, 먼저 `survSplit` 으로 **time** 을 쪼개 몇 개의 그룹으로 나눈다.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvet2 <- survSplit(Surv(time, status) ~ ., data = veteran, cut=c(90, 180), episode = \"tgroup\", id = \"id\")\ndatatable(vet2, rownames = F, caption = \"Time split data\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-2022548c45f17bd0675d\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2022548c45f17bd0675d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Time split data<\\/caption>\",\"data\":[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"squamous\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"smallcell\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"adeno\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\",\"large\"],[60,70,70,70,60,60,60,60,60,70,70,20,40,80,80,50,50,50,70,70,60,40,30,30,80,70,60,60,60,60,40,80,60,40,40,60,60,60,60,30,80,80,30,50,50,60,80,40,20,80,80,30,75,70,60,60,60,30,60,80,80,60,70,50,50,40,40,40,40,20,70,70,40,80,80,80,80,50,80,80,30,80,80,50,50,80,80,50,50,50,70,70,70,60,60,60,40,80,80,80,80,80,80,70,70,90,90,90,90,90,80,80,80,80,70,70,70,60,60,90,90,90,80,80,80,50,50,50,50,50,50,70,70,70,70,70,20,60,60,60,90,90,90,30,20,70,70,70,90,90,90,80,80,80,50,70,60,90,90,90,50,30,70,70,20,30,60,40,30,20,60,70,70,80,85,85,70,70,70,70,50,30,40,40,40,99,80,60,60,60,60,50,70,10,40,70,70,90,90,90,80,50,40,40,60,70,70,30,60,30,60,80,80,80,75,75,60,60,70,70,70,80,80,80,30],[7,5,5,5,3,3,3,9,9,11,11,5,10,29,29,18,18,18,6,6,4,58,4,4,9,11,3,9,9,9,2,4,4,3,3,5,5,14,14,2,3,3,4,12,12,4,12,2,15,2,2,5,3,2,25,25,25,4,1,28,28,8,1,7,11,4,4,4,23,19,10,10,6,2,2,5,5,4,5,5,3,4,4,16,16,5,5,15,15,15,2,2,2,12,12,12,12,5,5,5,12,12,12,2,2,2,2,2,8,8,11,11,5,5,8,8,8,13,13,12,12,12,6,6,3,8,8,8,1,1,1,7,7,7,3,3,21,3,3,3,2,2,2,6,36,13,13,13,2,2,2,28,28,28,7,11,13,2,2,2,13,2,22,22,4,2,2,36,9,11,8,3,3,2,4,4,2,2,1,1,17,87,8,2,5,3,3,5,22,3,3,5,8,4,4,3,3,3,3,3,4,10,3,4,4,15,15,4,12,5,11,10,10,10,1,1,5,5,18,18,18,4,4,4,3],[69,64,64,64,38,38,38,63,63,65,65,49,69,68,68,43,43,43,70,70,81,63,63,63,52,48,61,42,42,42,35,63,56,55,55,67,67,63,63,65,46,46,53,69,69,68,43,55,42,64,64,65,65,55,66,66,66,60,67,53,53,62,67,72,48,68,68,68,67,61,60,60,62,38,38,50,50,63,64,64,43,34,34,66,66,62,62,52,52,52,47,47,47,63,63,63,68,45,45,45,41,41,41,66,66,62,62,62,60,60,66,66,38,38,53,53,53,37,37,54,54,54,60,60,48,52,52,52,70,70,70,50,50,50,62,62,65,58,58,58,62,62,62,64,63,58,58,58,64,64,64,52,52,52,35,63,70,51,51,51,40,69,36,36,71,62,60,44,54,66,49,72,72,68,62,62,71,70,61,61,71,59,67,60,69,57,39,62,50,43,70,66,61,81,58,63,63,60,60,60,62,42,69,63,45,68,68,39,66,63,49,64,64,64,65,65,64,64,67,67,67,65,65,65,37],[0,10,10,10,0,0,0,10,10,10,10,0,10,0,0,0,0,0,0,0,0,10,0,0,10,10,0,0,0,0,0,10,0,0,0,0,0,10,10,0,0,0,10,0,0,0,10,10,0,0,0,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,10,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,0,0,0,10,10,10,0,0,0,10,10,10,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,0,0,10,0,0,0,10,0,10,10,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,10,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,10,10,0,0,10,10,10,10,0,0,0,0,10,10,10,0,0,0,0],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\"],[1,2,2,2,3,3,3,4,4,5,5,6,7,8,8,9,9,9,10,10,11,12,13,13,14,15,16,17,17,17,18,19,20,21,21,22,22,23,23,24,25,25,26,27,27,28,29,30,31,32,32,33,34,35,36,36,36,37,38,39,39,40,41,42,43,44,44,44,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,56,57,57,57,58,58,58,59,59,59,60,61,61,61,62,62,62,63,63,64,64,64,65,65,66,66,67,67,68,68,68,69,69,70,70,70,71,71,72,73,73,73,74,74,74,75,75,75,76,76,77,78,78,78,79,79,79,80,81,82,82,82,83,83,83,84,84,84,85,86,87,88,88,88,89,90,91,91,92,93,94,95,96,97,98,99,99,100,101,101,102,103,104,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,120,121,121,121,122,123,124,125,126,127,127,128,129,130,131,132,132,132,133,133,134,134,135,135,135,136,136,136,137],[0,0,90,180,0,90,180,0,90,0,90,0,0,0,90,0,90,180,0,90,0,0,0,90,0,0,0,0,90,180,0,0,0,0,90,0,90,0,90,0,0,90,0,0,90,0,0,0,0,0,90,0,0,0,0,90,180,0,0,0,90,0,0,0,0,0,90,180,0,0,0,90,0,0,90,0,90,0,0,90,0,0,90,0,90,0,90,0,90,180,0,90,180,0,90,180,0,0,90,180,0,90,180,0,90,0,90,180,0,90,0,90,0,90,0,90,180,0,90,0,90,180,0,90,0,0,90,180,0,90,180,0,90,180,0,90,0,0,90,180,0,90,180,0,0,0,90,180,0,90,180,0,90,180,0,0,0,0,90,180,0,0,0,90,0,0,0,0,0,0,0,0,90,0,0,90,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,180,0,0,0,0,0,0,90,0,0,0,0,0,90,180,0,90,0,90,0,90,180,0,90,180,0],[72,90,180,411,90,180,228,90,126,90,118,10,82,90,110,90,180,314,90,100,42,8,90,144,25,11,30,90,180,384,4,54,13,90,123,90,97,90,153,59,90,117,16,90,151,22,56,21,18,90,139,20,31,52,90,180,287,18,51,90,122,27,54,7,63,90,180,392,10,8,90,92,35,90,117,90,132,12,90,162,3,90,95,90,177,90,162,90,180,216,90,180,553,90,180,278,12,90,180,260,90,180,200,90,156,90,180,182,90,143,90,105,90,103,90,180,250,90,100,90,180,999,90,112,87,90,180,231,90,180,242,90,180,991,90,111,1,90,180,587,90,180,389,33,25,90,180,357,90,180,467,90,180,201,1,30,44,90,180,283,15,25,90,103,21,13,87,2,20,7,24,90,99,8,90,99,61,25,90,95,80,51,29,24,18,83,31,51,90,52,73,8,36,48,7,90,140,90,180,186,84,19,45,80,52,90,164,19,53,15,43,90,180,340,90,133,90,111,90,180,231,90,180,378,49],[1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1],[1,1,2,3,1,2,3,1,2,1,2,1,1,1,2,1,2,3,1,2,1,1,1,2,1,1,1,1,2,3,1,1,1,1,2,1,2,1,2,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,3,1,1,1,2,1,1,1,1,1,2,3,1,1,1,2,1,1,2,1,2,1,1,2,1,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,1,2,3,1,2,1,2,1,2,1,2,3,1,2,1,2,3,1,2,1,1,2,3,1,2,3,1,2,3,1,2,1,1,2,3,1,2,3,1,1,1,2,3,1,2,3,1,2,3,1,1,1,1,2,3,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,1,1,1,1,1,1,2,1,1,1,1,1,2,3,1,2,1,2,1,2,3,1,2,3,1]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>trt<\\/th>\\n      <th>celltype<\\/th>\\n      <th>karno<\\/th>\\n      <th>diagtime<\\/th>\\n      <th>age<\\/th>\\n      <th>prior<\\/th>\\n      <th>karno_cat<\\/th>\\n      <th>id<\\/th>\\n      <th>tstart<\\/th>\\n      <th>time<\\/th>\\n      <th>status<\\/th>\\n      <th>tgroup<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,2,3,4,5,7,8,9,10,11]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n이제 공변량의 계수를 시간그룹 별로 따로 구한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvfit2 <- coxph(Surv(tstart, time, status) ~ trt + prior + karno:strata(tgroup), data=vet2)\nsummary(vfit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ncoxph(formula = Surv(tstart, time, status) ~ trt + prior + karno:strata(tgroup), \n    data = vet2)\n\n  n= 225, number of events= 128 \n\n                                  coef exp(coef)  se(coef)      z Pr(>|z|)    \ntrt                          -0.011025  0.989035  0.189062 -0.058    0.953    \nprior                        -0.006107  0.993912  0.020355 -0.300    0.764    \nkarno:strata(tgroup)tgroup=1 -0.048755  0.952414  0.006222 -7.836 4.64e-15 ***\nkarno:strata(tgroup)tgroup=2  0.008050  1.008083  0.012823  0.628    0.530    \nkarno:strata(tgroup)tgroup=3 -0.008349  0.991686  0.014620 -0.571    0.568    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                             exp(coef) exp(-coef) lower .95 upper .95\ntrt                             0.9890      1.011    0.6828    1.4327\nprior                           0.9939      1.006    0.9550    1.0344\nkarno:strata(tgroup)tgroup=1    0.9524      1.050    0.9409    0.9641\nkarno:strata(tgroup)tgroup=2    1.0081      0.992    0.9831    1.0337\nkarno:strata(tgroup)tgroup=3    0.9917      1.008    0.9637    1.0205\n\nConcordance= 0.725  (se = 0.024 )\nLikelihood ratio test= 63.04  on 5 df,   p=3e-12\nWald test            = 63.7  on 5 df,   p=2e-12\nScore (logrank) test = 71.33  on 5 df,   p=5e-14\n```\n:::\n:::\n\n\n\n### 반복측정 공변량이 있을 때\n\n[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6015946/pdf/atm-06-07-121.pdf](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6015946/pdf/atm-06-07-121.pdf) 예제를 이용하였다. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(survsim)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: eha\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: statmod\n```\n:::\n\n```{.r .cell-code}\nN=100 #number of patients\nset.seed(123)\ndf.tf<-simple.surv.sim(#baseline time fixed\n n=N, foltime=500,\n dist.ev=c('llogistic'),\n anc.ev=c(0.68), beta0.ev=c(5.8),\n anc.cens=1.2,\n beta0.cens=7.4,\n z=list(c(\"unif\", 0.8, 1.2)),\n beta=list(c(-0.4),c(0)),\n x=list(c(\"bern\", 0.5),\n c(\"normal\", 70, 13)))\n\nfor (v in 4:7){\n  df.tf[[v]] <- round(df.tf[[v]])\n}\n\nnames(df.tf)[c(1,4,6,7)]<-c(\"id\", \"time\", \"grp\",\"age\")\ndf.tf <- df.tf[, -3]\n\ndatatable(df.tf, rownames = F, caption = \"df.tf: Original data\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-68b2ba06aaedca1d71a1\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-68b2ba06aaedca1d71a1\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>df.tf: Original data<\\/caption>\",\"data\":[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1],[48,121,31,500,70,233,156,258,84,172,175,310,269,500,133,130,139,219,500,201,500,500,421,77,364,147,130,95,330,280,191,231,342,408,104,500,500,250,33,500,450,153,190,500,209,384,67,137,500,476,229,299,112,500,500,246,68,54,129,500,500,211,106,500,82,112,47,42,372,27,270,130,333,114,311,500,77,500,500,320,89,65,53,40,149,109,255,30,500,193,500,125,249,102,500,139,298,305,47,30],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0],[80,86,72,92,77,87,60,66,84,59,53,82,28,54,68,75,53,92,56,56,64,53,78,68,60,70,60,66,62,74,64,72,74,72,85,61,67,76,88,67,75,94,62,85,73,38,69,60,76,82,39,39,49,84,46,63,75,60,74,99,59,43,69,95,88,63,53,73,76,59,75,66,105,57,77,65,79,57,81,68,82,76,77,80,58,52,80,47,63,78,53,84,86,42,75,87,43,66,73,85]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>id<\\/th>\\n      <th>status<\\/th>\\n      <th>time<\\/th>\\n      <th>z<\\/th>\\n      <th>grp<\\/th>\\n      <th>age<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1,2,3,4,5]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n```{.r .cell-code}\n nft<-sample(1:10,\n N,replace=T)#number of follow up time points\ncrp<-round(abs(rnorm(sum(nft)+N,\n mean=100,sd=40)),1)\ntime<-NA\nid<-NA\ni=0\nfor(n in nft){\ni=i+1\ntime.n<-sample(1:500,n)\ntime.n<-c(0,sort(time.n))\ntime<-c(time,time.n)\nid.n<-rep(i,n+1)\nid<-c(id,id.n)\n}\ndf.td <- cbind(data.frame(id,time)[-1,],crp)\ndatatable(df.td, rownames = F, caption = \"df.td: Time dependent CRP\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-56157bd0d1b026323d9b\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-56157bd0d1b026323d9b\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>df.td: Time dependent CRP<\\/caption>\",\"data\":[[1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,27,27,28,28,29,29,29,29,30,30,30,30,30,31,31,32,32,32,32,32,32,33,33,33,33,33,34,34,34,35,35,35,35,35,35,35,35,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,39,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,44,44,44,45,45,45,45,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,53,53,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,57,57,57,58,58,58,58,59,59,60,60,60,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,73,73,73,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,78,78,78,78,78,78,79,79,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,86,86,86,86,87,87,87,87,87,88,88,88,88,89,89,89,89,89,89,89,89,90,90,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,94,94,95,95,95,95,95,95,95,95,96,96,96,96,96,96,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100],[0,81,101,114,130,139,255,318,320,411,0,99,238,447,0,17,51,185,226,287,350,380,397,426,448,0,115,122,187,318,329,434,457,0,86,186,0,32,102,104,124,129,402,431,450,494,0,36,71,75,325,347,500,0,42,283,383,479,0,32,33,75,106,379,412,0,249,343,0,85,300,0,40,79,96,190,199,224,421,487,0,89,259,270,279,304,362,374,440,0,75,123,317,318,351,0,49,188,195,255,284,345,347,392,475,0,205,233,300,374,412,435,463,0,31,230,307,0,46,60,75,185,307,333,425,0,114,245,278,311,318,373,408,493,0,12,44,220,317,356,371,379,404,464,474,0,165,172,177,275,322,0,77,0,56,94,103,108,144,389,455,0,26,56,102,467,491,492,0,10,38,173,219,294,307,424,498,0,215,413,478,497,0,215,310,322,341,403,448,0,147,0,33,333,372,0,64,165,199,294,0,26,0,32,175,229,293,465,0,45,123,243,296,0,36,353,0,40,50,68,184,284,341,440,0,55,121,310,0,11,12,30,164,216,302,351,412,466,471,0,216,254,395,0,273,0,70,74,202,310,388,407,482,0,92,102,124,169,211,251,0,48,237,329,376,0,179,255,263,408,490,0,16,192,316,328,338,344,380,0,47,413,466,0,61,497,0,67,70,153,208,279,318,325,473,0,11,235,396,403,0,71,79,190,225,328,485,0,7,13,99,201,245,249,256,340,396,462,0,73,220,224,247,249,359,420,0,34,184,189,211,369,489,0,332,0,16,74,98,330,398,487,0,136,149,194,207,243,289,344,353,0,376,402,483,0,16,260,0,98,167,446,0,494,0,348,420,0,211,497,0,147,151,204,313,327,402,450,456,0,23,46,89,139,176,273,369,378,386,493,0,205,278,281,342,0,102,122,216,316,419,426,439,457,495,0,25,36,143,233,271,425,460,0,5,51,81,88,256,357,386,462,0,75,135,417,0,48,218,267,271,343,485,0,12,134,138,281,284,482,0,55,109,147,236,264,304,348,419,0,386,0,254,333,0,31,181,237,339,358,0,33,108,153,155,157,203,328,500,0,56,63,72,296,348,364,464,481,0,15,40,104,152,266,298,348,0,75,130,146,366,386,0,128,0,121,122,147,194,215,240,261,262,297,444,0,98,114,130,140,209,283,336,398,463,0,61,117,143,152,290,379,387,458,475,0,30,59,144,168,299,313,393,0,64,111,117,175,205,210,300,347,439,457,0,227,253,314,493,0,40,210,220,254,318,432,453,457,0,104,390,491,498,0,252,278,346,0,15,72,155,166,177,292,313,0,86,0,72,142,236,363,473,498,0,19,64,109,121,159,170,172,259,454,494,0,4,10,154,157,185,208,251,295,373,405,0,439,0,30,35,115,208,277,371,423,0,38,125,239,253,475,0,36,46,266,293,386,438,0,11,118,135,172,196,239,269,355,361,386,0,296,343,379,395,416,424,0,5,6,176,188,357,413,489,490,497],[101.4,107.6,107,57.8,119,155.1,118.2,54.6,82.6,113.8,74.1,13.7,135.4,66.8,77.1,160.2,69,133.8,49.6,85.8,97.1,53.3,74.6,98.8,126.8,34,86,130.3,78.4,109.1,119.7,110.7,126.1,95.1,83.5,5.7,96.3,117.2,121.4,77.8,171.2,111.5,105.1,150.9,71.3,82,195.9,100.4,165.3,42.5,92.4,115.1,112,59.8,100.8,56.9,128.5,143.4,11,149.4,50.4,118.2,126.4,92,74.2,106.6,117.6,135.3,17.9,34.5,157.2,141.9,117.4,128.6,136.7,6.4,144.4,80.6,109.2,88.2,134.9,86.1,120.7,84.4,56.3,148.4,129.6,169,102.6,145,179,88.7,47.1,90.4,91.4,106.1,168.5,87,114.9,90.9,100.8,112.6,153.1,104.9,128.5,131.2,136.6,77,165.1,84.8,95.8,156.2,151.8,56.4,65.1,45.7,107.3,106.6,114.6,122.1,75.9,60.3,141.1,130,39.6,96.2,64.2,17.2,106,96.8,96.1,108.6,135.3,108.2,75.3,70.6,94.7,112.4,58.4,92.6,138.7,95.7,72.1,89,144.6,122,149.5,105.6,116.4,77.7,124.2,79.7,43.2,105.1,177.8,132,146.6,114.4,75.7,91.9,89.1,81.3,128.2,52.1,134.7,134.6,52.1,125.6,197.2,77.7,133.8,68.7,144.4,110,166.1,41.6,97.9,78.9,92.1,74.8,66.6,123.1,56.5,159.4,52.6,104,121.3,123.5,87.9,103.2,138.5,41.7,68.7,112.8,82.2,154.8,126.9,102.9,39.7,101,87.3,95.9,52.7,119.9,58.4,91,115.3,68.7,123.3,47.3,12.4,118.6,133.6,88.6,120.2,53.8,94.9,22.3,147.2,174.4,143,98.9,98.7,39.4,131.6,91.6,73.7,43.5,88,66,84.1,51.3,167.5,99.4,143,4.1,81.9,73,51.1,161.9,43.4,112.7,133.9,107.1,65,137.6,106.8,57.5,44.5,183.5,72.9,25.8,121.3,112.4,45.8,22.3,95.3,145.6,125.4,80.3,66.6,110.8,106.3,125.2,84.2,136,66.8,86.8,129.6,139.6,22.5,104.3,124.4,42,119.2,66.9,140.8,121.5,130.8,104.8,134.5,155.2,178.6,98.9,10,101.3,108.2,93.8,122.7,140.4,79.3,88.2,115.9,78,103.7,21.5,55.2,46.9,65.9,72.3,115.3,139.3,70.9,60.1,58.3,83.4,90.4,119.3,87.1,16.9,96.3,147.5,147.7,68.4,38.1,198.3,93.5,96.1,116.8,35.4,70.9,38.4,72.3,104.8,45.4,123.6,111.6,63.8,109.1,129.9,142.4,91.5,96.3,96.5,157.7,145,133.4,88.5,114.9,116.1,58.3,30.9,125.7,38.8,100.1,110,122.6,107.6,70.7,139.5,169.5,135.2,22.3,156,97.8,121,124.9,96.1,97,140.8,128.5,139.6,195.3,126.6,108.3,11.6,207.7,80.7,195,115,161.5,95.6,120.5,108.6,92.6,95.2,140.5,91.9,18.5,92.2,121.6,124.7,124.7,32.3,114.7,138.7,151.1,91,87.1,159.5,33.3,82.5,118.3,35.3,111.2,175.1,99.8,88.9,119,88.8,132.5,136.2,100.1,52.9,47.3,76.3,131.9,21.7,24.5,73.8,115.8,63.5,135.5,113.3,93.2,132.8,115.5,82.2,109.2,125.9,114.3,73.7,134.2,146.1,111.1,105.8,97,186.5,111.1,93.7,0.3,37.4,96.9,108.3,111.1,132.9,92.2,148.6,63.1,51.7,50.8,129.7,96.7,131.6,89.3,76.3,85.3,25.9,53.2,42.3,142.2,76.1,131.6,160.7,92.3,111.4,30,67.3,102.2,112,69.6,207.4,81.7,102.6,126,99,74.3,141.8,164.6,98.8,122.5,96.1,140.7,53.8,192.8,75.9,41.6,86,105.9,164.9,136.4,105.7,44.4,65.4,93.5,202.1,25.6,145.2,78.9,166.6,54.4,105.7,56,136.1,159.4,178,131.9,173.7,149.9,94.7,119.1,61.1,92.6,148.8,121.7,118.3,58.5,75.8,69.4,115.8,60.4,122.5,55.3,173.1,118.4,72,109.6,85.9,114.8,109.7,59.4,68.3,112,165.6,143.4,75,133,98.1,112.1,110.4,203,52.6,104,28.8,123.6,143.9,157.8,23,116.5,163.7,83.4,91.5,98.5,114.6,126.6,152.7,96.2,107.9,199.5,117.2,107.6,46.3,100.1,91.1,99.6,77,72.5,71.2,91.4,154.7,142,85.6,32.6,66.2,81.7,104.1,73.5,180.3,89.1,51.4,94.3,59.8,106.2,109.3,114.2,35.1,108.8,112.4,43.2,138.2,131.4,192,106.3,101.9,103.9,102.8,26.1,33.2,96.9,76.8,102.2,15.6,40.1,55.9,139.4,56.1,68,103.2,87.1,105.9,192.2,55,87.8,79.3,160.5,69.2,96.7,131.5,57.7,166.2,127,57,118.2,91.5,112.5,96.4,142.8,46,79.1,90,60.2,58.4,99.3,94.7,2,141.6,110,196.6,127.4,82.1,211.9,213.3,51.3,118.8,91.6,107.5,109.1,49.5,111.4,170,93.4,93.5,155.9,135.9,34.1,109.1,166.1,156.6,116.8,128.8,52.1,112,61.8,81.7,137.4,54.5,110.7]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>id<\\/th>\\n      <th>time<\\/th>\\n      <th>crp<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1,2]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**df.tf** 는 기본정보가 담긴 데이터, **df.td** 는 time-dependent covariate 가 담긴 데이터이다. `tmerge` 함수를 2번 실행하면 두 정보를 합칠 수 있다. 먼저 **df.tf** 만 이용해서 **tstart, tstop** 변수를 만들자. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tmerge(df.tf, df.tf, id = id, status1 = event(time, status))\n\ndatatable(df, rownames = F, caption = \"df: add tstart/tstop\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-3584a11c2a1497a11c64\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3584a11c2a1497a11c64\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>df: add tstart/tstop<\\/caption>\",\"data\":[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1],[48,121,31,500,70,233,156,258,84,172,175,310,269,500,133,130,139,219,500,201,500,500,421,77,364,147,130,95,330,280,191,231,342,408,104,500,500,250,33,500,450,153,190,500,209,384,67,137,500,476,229,299,112,500,500,246,68,54,129,500,500,211,106,500,82,112,47,42,372,27,270,130,333,114,311,500,77,500,500,320,89,65,53,40,149,109,255,30,500,193,500,125,249,102,500,139,298,305,47,30],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0],[80,86,72,92,77,87,60,66,84,59,53,82,28,54,68,75,53,92,56,56,64,53,78,68,60,70,60,66,62,74,64,72,74,72,85,61,67,76,88,67,75,94,62,85,73,38,69,60,76,82,39,39,49,84,46,63,75,60,74,99,59,43,69,95,88,63,53,73,76,59,75,66,105,57,77,65,79,57,81,68,82,76,77,80,58,52,80,47,63,78,53,84,86,42,75,87,43,66,73,85],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,121,31,500,70,233,156,258,84,172,175,310,269,500,133,130,139,219,500,201,500,500,421,77,364,147,130,95,330,280,191,231,342,408,104,500,500,250,33,500,450,153,190,500,209,384,67,137,500,476,229,299,112,500,500,246,68,54,129,500,500,211,106,500,82,112,47,42,372,27,270,130,333,114,311,500,77,500,500,320,89,65,53,40,149,109,255,30,500,193,500,125,249,102,500,139,298,305,47,30],[1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>id<\\/th>\\n      <th>status<\\/th>\\n      <th>time<\\/th>\\n      <th>z<\\/th>\\n      <th>grp<\\/th>\\n      <th>age<\\/th>\\n      <th>tstart<\\/th>\\n      <th>tstop<\\/th>\\n      <th>status1<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1,2,3,4,5,6,7,8]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n`tmerge` 함수의 첫번째는 baseline data, 둘째는 time-dependent covariate 가 담긴 데이터가 들어가지만, **tstart, tstop** 를 만들기 위해 모두 **df.tf** 를 넣었다. **status1** 이라는 변수를 **event(time, status)** 로 지정함으로서 tstart, tstop 을 인식할 수 있다. **status1** 변수 자체는 **status** 와 동일하다. 이렇게 만든 **df** 에 time-dependent 정보가 담긴 **df.td** 를 결합하면 원하는 데이터를 얻을 수 있다. `tmerge` 의 자세한 내용은 https://ww2.amstat.org/meetings/sdss/2018/onlineprogram/ViewPresentation.cfm?file=304494.pdf 를 참고하기 바란다.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf2 <- tmerge(df, df.td, id = id, crp = tdc(time, crp))\n\ndatatable(df2, rownames = F, caption = \"df2: final\", options = list(scrollX = T))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-8a84aa81f6dfee4e4c42\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8a84aa81f6dfee4e4c42\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>df2: final<\\/caption>\",\"data\":[[1,2,2,3,3,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,7,7,7,7,8,8,9,9,9,9,10,11,11,12,12,12,12,12,12,12,13,13,13,14,14,14,14,14,14,15,15,16,17,17,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,21,21,21,21,21,21,22,22,23,23,23,23,23,23,23,24,24,24,25,25,25,25,25,25,25,26,27,28,29,29,30,30,30,30,31,31,32,32,32,32,33,33,33,33,33,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,43,43,44,44,44,44,44,44,44,44,45,45,46,46,47,48,48,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,52,52,52,52,52,53,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,57,57,58,59,60,60,60,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,64,65,66,66,66,67,67,68,69,69,69,69,69,69,70,70,71,71,71,71,71,71,72,73,73,74,74,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,78,78,78,78,78,78,79,79,80,80,80,80,80,80,80,80,80,80,81,82,82,83,83,84,85,86,86,87,87,88,89,89,89,89,89,89,89,89,90,90,91,91,91,91,91,91,91,92,92,92,92,92,93,93,93,93,93,93,93,94,95,95,95,95,95,95,95,95,96,96,96,97,97,97,97,97,98,98,98,98,98,98,98,98,99,100,100,100],[1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],[48,121,121,31,31,500,500,500,500,500,500,500,500,70,233,233,233,233,233,233,156,156,156,156,258,258,84,84,84,84,172,175,175,310,310,310,310,310,310,310,269,269,269,500,500,500,500,500,500,133,133,130,139,139,219,219,219,219,219,500,500,500,500,500,500,500,500,500,201,201,201,500,500,500,500,500,500,500,500,421,421,421,421,421,421,421,77,77,77,364,364,364,364,364,364,364,147,130,95,330,330,280,280,280,280,191,191,231,231,231,231,342,342,342,342,342,408,408,408,104,104,104,104,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,250,250,33,500,500,500,500,500,500,500,500,450,450,450,450,450,450,450,153,153,190,190,500,500,500,500,500,500,500,500,209,209,384,384,67,137,137,500,500,500,500,500,500,500,476,476,476,476,476,476,476,476,476,476,476,229,229,229,229,299,299,299,299,299,112,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,246,68,68,54,129,500,500,500,500,500,500,211,211,211,211,106,106,106,106,500,500,500,500,500,82,112,112,112,47,47,42,372,372,372,372,372,372,27,27,270,270,270,270,270,270,130,333,333,114,114,311,311,311,311,311,311,311,500,500,500,500,500,500,500,500,500,77,77,77,500,500,500,500,500,500,500,500,320,320,320,320,320,320,320,320,320,320,89,65,65,53,53,40,149,109,109,255,255,30,500,500,500,500,500,500,500,500,193,193,500,500,500,500,500,500,500,125,125,125,125,125,249,249,249,249,249,249,249,102,500,500,500,500,500,500,500,500,139,139,139,298,298,298,298,298,305,305,305,305,305,305,305,305,47,30,30,30],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0],[80,86,86,72,72,92,92,92,92,92,92,92,92,77,87,87,87,87,87,87,60,60,60,60,66,66,84,84,84,84,59,53,53,82,82,82,82,82,82,82,28,28,28,54,54,54,54,54,54,68,68,75,53,53,92,92,92,92,92,56,56,56,56,56,56,56,56,56,56,56,56,64,64,64,64,64,64,53,53,78,78,78,78,78,78,78,68,68,68,60,60,60,60,60,60,60,70,60,66,62,62,74,74,74,74,64,64,72,72,72,72,74,74,74,74,74,72,72,72,85,85,85,85,61,61,61,61,67,67,67,67,67,67,67,67,67,67,67,76,76,88,67,67,67,67,67,67,67,67,75,75,75,75,75,75,75,94,94,62,62,85,85,85,85,85,85,85,85,73,73,38,38,69,60,60,76,76,76,76,76,76,76,82,82,82,82,82,82,82,82,82,82,82,39,39,39,39,39,39,39,39,39,49,84,84,84,84,84,84,84,46,46,46,46,46,46,46,46,46,63,75,75,60,74,99,99,99,59,59,59,43,43,43,43,69,69,69,69,95,95,95,95,95,88,63,63,63,53,53,73,76,76,76,76,76,76,59,59,75,75,75,75,75,75,66,105,105,57,57,77,77,77,77,77,77,77,65,65,65,65,65,65,65,65,65,79,79,79,57,57,57,57,57,57,81,81,68,68,68,68,68,68,68,68,68,68,82,76,76,77,77,80,58,52,52,80,80,47,63,63,63,63,63,63,63,63,78,78,53,53,53,53,53,53,53,84,84,84,84,84,86,86,86,86,86,86,86,42,75,75,75,75,75,75,75,75,87,87,87,43,43,43,43,43,66,66,66,66,66,66,66,66,73,85,85,85],[0,0,99,0,17,0,115,122,187,318,329,434,457,0,0,32,102,104,124,129,0,36,71,75,0,42,0,32,33,75,0,0,85,0,40,79,96,190,199,224,0,89,259,0,75,123,317,318,351,0,49,0,0,31,0,46,60,75,185,0,114,245,278,311,318,373,408,493,0,12,44,0,165,172,177,275,322,0,77,0,56,94,103,108,144,389,0,26,56,0,10,38,173,219,294,307,0,0,0,0,33,0,64,165,199,0,26,0,32,175,229,0,45,123,243,296,0,36,353,0,40,50,68,0,55,121,310,0,11,12,30,164,216,302,351,412,466,471,0,216,0,0,70,74,202,310,388,407,482,0,92,102,124,169,211,251,0,48,0,179,0,16,192,316,328,338,344,380,0,47,0,61,0,0,11,0,71,79,190,225,328,485,0,7,13,99,201,245,249,256,340,396,462,0,73,220,224,0,34,184,189,211,0,0,16,74,98,330,398,487,0,136,149,194,207,243,289,344,353,0,0,16,0,0,0,348,420,0,211,497,0,147,151,204,0,23,46,89,0,205,278,281,342,0,0,25,36,0,5,0,0,48,218,267,271,343,0,12,0,55,109,147,236,264,0,0,254,0,31,0,33,108,153,155,157,203,0,56,63,72,296,348,364,464,481,0,15,40,0,75,130,146,366,386,0,128,0,121,122,147,194,215,240,261,262,297,0,0,61,0,30,0,0,0,40,0,104,0,0,15,72,155,166,177,292,313,0,86,0,72,142,236,363,473,498,0,19,64,109,121,0,4,10,154,157,185,208,0,0,30,35,115,208,277,371,423,0,38,125,0,36,46,266,293,0,11,118,135,172,196,239,269,0,0,5,6],[48,99,121,17,31,115,122,187,318,329,434,457,500,70,32,102,104,124,129,233,36,71,75,156,42,258,32,33,75,84,172,85,175,40,79,96,190,199,224,310,89,259,269,75,123,317,318,351,500,49,133,130,31,139,46,60,75,185,219,114,245,278,311,318,373,408,493,500,12,44,201,165,172,177,275,322,500,77,500,56,94,103,108,144,389,421,26,56,77,10,38,173,219,294,307,364,147,130,95,33,330,64,165,199,280,26,191,32,175,229,231,45,123,243,296,342,36,353,408,40,50,68,104,55,121,310,500,11,12,30,164,216,302,351,412,466,471,500,216,250,33,70,74,202,310,388,407,482,500,92,102,124,169,211,251,450,48,153,179,190,16,192,316,328,338,344,380,500,47,209,61,384,67,11,137,71,79,190,225,328,485,500,7,13,99,201,245,249,256,340,396,462,476,73,220,224,229,34,184,189,211,299,112,16,74,98,330,398,487,500,136,149,194,207,243,289,344,353,500,246,16,68,54,129,348,420,500,211,497,500,147,151,204,211,23,46,89,106,205,278,281,342,500,82,25,36,112,5,47,42,48,218,267,271,343,372,12,27,55,109,147,236,264,270,130,254,333,31,114,33,108,153,155,157,203,311,56,63,72,296,348,364,464,481,500,15,40,77,75,130,146,366,386,500,128,500,121,122,147,194,215,240,261,262,297,320,89,61,65,30,53,40,149,40,109,104,255,30,15,72,155,166,177,292,313,500,86,193,72,142,236,363,473,498,500,19,64,109,121,125,4,10,154,157,185,208,249,102,30,35,115,208,277,371,423,500,38,125,139,36,46,266,293,298,11,118,135,172,196,239,269,305,47,5,6,30],[1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1],[101.4,74.1,13.7,77.1,160.2,34,86,130.3,78.4,109.1,119.7,110.7,126.1,95.1,96.3,117.2,121.4,77.8,171.2,111.5,195.9,100.4,165.3,42.5,59.8,100.8,11,149.4,50.4,118.2,106.6,17.9,34.5,141.9,117.4,128.6,136.7,6.4,144.4,80.6,134.9,86.1,120.7,145,179,88.7,47.1,90.4,91.4,106.1,168.5,131.2,56.4,65.1,106.6,114.6,122.1,75.9,60.3,96.2,64.2,17.2,106,96.8,96.1,108.6,135.3,108.2,75.3,70.6,94.7,122,149.5,105.6,116.4,77.7,124.2,79.7,43.2,105.1,177.8,132,146.6,114.4,75.7,91.9,81.3,128.2,52.1,197.2,77.7,133.8,68.7,144.4,110,166.1,78.9,56.5,103.2,41.7,68.7,154.8,126.9,102.9,39.7,87.3,95.9,52.7,119.9,58.4,91,123.3,47.3,12.4,118.6,133.6,88.6,120.2,53.8,94.9,22.3,147.2,174.4,131.6,91.6,73.7,43.5,88,66,84.1,51.3,167.5,99.4,143,4.1,81.9,73,51.1,161.9,43.4,107.1,137.6,106.8,57.5,44.5,183.5,72.9,25.8,121.3,112.4,45.8,22.3,95.3,145.6,125.4,80.3,66.6,110.8,136,66.8,104.3,124.4,42,119.2,66.9,140.8,121.5,130.8,104.8,134.5,98.9,10,108.2,21.5,55.2,115.3,139.3,70.9,60.1,58.3,83.4,90.4,119.3,87.1,16.9,96.3,147.5,147.7,68.4,38.1,198.3,93.5,96.1,116.8,35.4,70.9,38.4,111.6,63.8,109.1,129.9,142.4,96.5,145,133.4,88.5,114.9,116.1,58.3,30.9,125.7,38.8,100.1,110,122.6,107.6,70.7,139.5,169.5,135.2,121,124.9,97,195.3,108.3,11.6,207.7,80.7,195,115,161.5,95.6,120.5,108.6,92.2,121.6,124.7,124.7,33.3,82.5,118.3,35.3,111.2,175.1,76.3,131.9,21.7,113.3,93.2,134.2,97,186.5,111.1,93.7,0.3,37.4,108.3,111.1,50.8,129.7,96.7,131.6,89.3,76.3,42.3,76.1,131.6,92.3,111.4,69.6,207.4,81.7,102.6,126,99,74.3,98.8,122.5,96.1,140.7,53.8,192.8,75.9,41.6,86,105.9,164.9,136.4,25.6,145.2,78.9,166.6,54.4,105.7,56,136.1,159.4,178,131.9,173.7,149.9,94.7,119.1,61.1,92.6,148.8,118.3,72,109.6,75,133,28.8,126.6,117.2,107.6,91.4,154.7,66.2,180.3,89.1,51.4,94.3,59.8,106.2,109.3,114.2,35.1,108.8,112.4,43.2,138.2,131.4,192,106.3,101.9,103.9,102.8,26.1,33.2,96.9,56.1,68,103.2,87.1,105.9,192.2,55,96.7,57.7,166.2,127,57,118.2,91.5,112.5,96.4,142.8,46,79.1,99.3,94.7,2,141.6,110,82.1,211.9,213.3,51.3,118.8,91.6,107.5,109.1,93.4,156.6,116.8,128.8]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>id<\\/th>\\n      <th>status<\\/th>\\n      <th>time<\\/th>\\n      <th>z<\\/th>\\n      <th>grp<\\/th>\\n      <th>age<\\/th>\\n      <th>tstart<\\/th>\\n      <th>tstop<\\/th>\\n      <th>status1<\\/th>\\n      <th>crp<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1,2,3,4,5,6,7,8,9]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**crp** 변수를 **tdc(time, crp)** 로 만들었다. 이제 cox model 을 실행할 수 있는데, 반복측정정보를 **cluster** 옵션에 넣는 것을 잊지 말자. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel.td <- coxph(Surv(tstart, tstop, status1) ~ grp + age + crp, data = df2, cluster = id)\nsummary(model.td)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ncoxph(formula = Surv(tstart, tstop, status1) ~ grp + age + crp, \n    data = df2, cluster = id)\n\n  n= 376, number of events= 67 \n\n         coef exp(coef)  se(coef) robust se     z Pr(>|z|)  \ngrp 0.5022750 1.6524764 0.2525914 0.2555150 1.966   0.0493 *\nage 0.0005535 1.0005536 0.0081077 0.0072342 0.077   0.9390  \ncrp 0.0007922 1.0007925 0.0027391 0.0023373 0.339   0.7347  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n    exp(coef) exp(-coef) lower .95 upper .95\ngrp     1.652     0.6052    1.0015     2.727\nage     1.001     0.9994    0.9865     1.015\ncrp     1.001     0.9992    0.9962     1.005\n\nConcordance= 0.554  (se = 0.04 )\nLikelihood ratio test= 4.21  on 3 df,   p=0.2\nWald test            = 4.34  on 3 df,   p=0.2\nScore (logrank) test = 4.18  on 3 df,   p=0.2,   Robust = 4.55  p=0.2\n\n  (Note: the likelihood ratio and score tests assume independence of\n     observations within a cluster, the Wald and robust score tests do not).\n```\n:::\n:::\n\n\n \n\n\n\n\n## 모수적(parametric) 생존분석 \n\nCox model 은 baseline hazard 없이도 HR 을 구할 수 있는 장점이 있다. 아래 식 \n\n\n$$h(t) = h_0(t) \\cdot \\exp(\\sum \\beta_i x_i)$$ \n\n\n에서 $h_0(t)$ 를 몰라도 $\\beta$ 들을 구할 수 있다는 뜻이고, cox model 이 준모수적(semi-parametric) 모형으로 불리는 이유이기도 하다. 그러나 Cox model 로 예측모형을 만들 때 이것은 단점이 된다. $t$ 년 생존율을 구할 수 없기 때문이다. 생존함수 $S(t)$ 는 아래처럼 계산하는데\n\n\n$$S(t) = \\int_{0}^{t} h(u) \\,du$$\n\nbaseline hazard 를 모르므로 $h(t)$ 도 알 수 없고 따라서 $S(t)$ 도 수식으로 표현할 수 없다. Cox model 로 예측모형을 만든 연구는 (1) 데이터에서 시간 $t$ 마다 $S(t)$ 의 값을 직접 구해 이용하거나, (2) 인구집단통계에서 $S(t)$ 를 얻어온다.\n\n\n그러면 baseline hazard 가 어떤 형태라고 가정하면 어떨까? 이것이 모수적 생존분석이며 cox model 과 장단점을 비교하면 아래와 같다.\n\n\n**Cox model**\n\n– distribution of survival time unkonwn\n\n– Less consistent with theoretical $S(t)$ (typically step function)\n\n\\+ Does not rely on distributional assumptions\n\n\\+ Baseline hazard not necessary for estimation of hazard ratio\n\n\n**Parametric Survival Model**\n\n\\+ Completely specified $h(t)$ and $S(t)$\n\n\\+ More consistent with theoretical $S(t)$\n\n\\+ time-quantile prediction possible\n\n– Assumption on underlying distribution\n\n\n아래는 대표적인 분포들이며 본 글에서는 흔히 쓰는 weibull 을 다루려 한다.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](paratable.png){fig-align='center' width=200%}\n:::\n:::\n\n\n아까 비례위험가정 얘기할 때 weibull 모형은 **log-log 그래프가 직선인지도 확인**해야 한다고 했는데, 그 이유는 아래 식에 나와있듯이 $\\log(-\\log(S(t)))$ 와 $\\log(t)$ 가 정비례관계이기 때문이다.\n\n\n$$\n\\begin{align}\nS(t) &= \\exp(-\\lambda t^p) \\\\\n-\\log(S(t)) &= \\lambda t^p \\\\\n\\log(-\\log(S(t))) &= \\log(\\lambda) + p\\log(t) \\\\\n\\log(-\\log(S(t))) &\\propto \\log(t)\n\\end{align}\n$$\n\n \n\n$p$ 를 **scale parameter** 라 하며 $p = 1$ 이면 baseline hazard 가 시간에 따라 일정함을 의미하며, 자세한 내용은 https://stat.ethz.ch/education/semesters/ss2011/seminar/contents/handout_9.pdf 를 참고하자. R의 `survreg` 함수를 이용하며, 결과해석은 cox model 과 동일한데 scale parameter 값이 추가로 나온다(scale parameter를 미리 정할 수도 있다).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel.weibull <- survreg(Surv(time, status) ~ trt, data = veteran)\nsummary(model.weibull)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsurvreg(formula = Surv(time, status) ~ trt, data = veteran)\n             Value Std. Error     z      p\n(Intercept) 4.7218     0.3275 14.42 <2e-16\ntrt         0.0478     0.2079  0.23  0.818\nLog(scale)  0.1585     0.0673  2.35  0.019\n\nScale= 1.17 \n\nWeibull distribution\nLoglik(model)= -748.1   Loglik(intercept only)= -748.1\n\tChisq= 0.05 on 1 degrees of freedom, p= 0.82 \nNumber of Newton-Raphson Iterations: 5 \nn= 137 \n```\n:::\n:::\n\n\nScale = 1.17 임을 확인할 수 있고, **trt** 그룹별 $S(t)$ 를 그려보면 아래와 같다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npcut <- seq(0.01, 1, by = 0.01)  ## 1%-99%\nptime <- predict(model.weibull, newdata = data.frame(trt = 1), type = \"quantile\", p = pcut, se = T)\nmatplot(cbind(ptime$fit, ptime$fit + 1.96*ptime$se.fit, ptime$fit - 1.96*ptime$se.fit), 1 - pcut,\n        xlab = \"Days\", ylab = \"Survival\", type = 'l', lty = c(1, 2, 2), col=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n$S(t)$ 를 구할 수 없는 cox model 의 그림과 비교해보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel.cox <- exp\nkmfit.exp <- survfit(exp, newdata = data.frame(trt = 1))\nplot(kmfit.exp, lty = c(1, 2, 2), col=1, lwd=2, xlab = \"Days\", ylab = \"Survival\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n지금까지 생존분석 때 고려할 내용을 다루었으며 처음의 요약을 반복하면 아래와 같다.\n\n- 자체 개발한 **[jskm](https://github.com/jinseob2kim/jskm)** 패키지로 kaplan-meier 그림을 그린다.\n\n- **Log-log plot, Observed-expected plot** 으로 비례위험가정을 확인 후, `cox.zph` 함수로 p-value 를 구한다. \n\n- `anova` 로 여러 모형의 log-likelohood 를 비교하고, `step` 으로 AIC 기반 최적모형을 고를 수 있다.\n\n- Time-dependent analysis 는 **(1) 비례위험가정이 깨졌을 때, (2) 반복측정 공변량이 있을 때** 수행한다.\n\n- 모수적 생존분석은 생존함수 $S(t)$ 를 구할 수 있어 예측모형을 만들 수 있다.\n\n\n자세한 내용은 중간중간 링크한 자료들을 참고하기 바란다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.24/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}