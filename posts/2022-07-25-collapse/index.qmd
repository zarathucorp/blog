---
title: collapse 패키지 소개
description: collapse 패키지를 소개하고 data.table 패키지와 비교하여 파악해보겠습니다.
image: collapse_logo_small.png
categories: [R, collapse, data.table]
author: 
  - name: beomsu Park
    url: https://github.com/qkrqjatn218/
date: 07-25-2022
draft: false
---

# 1. collapse 주요 특징 소개 및 설치

R의 고급 데이터 변환 및 통계 컴퓨팅을 위한 C/C++ 기반 패키지입니다.

-   유연하고 간결한 구문을 통해 매우 빠르고 클래스에 구애받지 않습니다,

-   기본 R, 'dplyr', 'tibble', 'data.table', 'sf', 'plm' 과 잘 통합됩니다.

## Setup

```{r}
#| echo: true
#| eval: false

##setup

#install.packages("collapse")

library(magrittr)
library(data.table) 
library(dplyr)
library(collapse)
library(microbenchmark)

```

```{r}
#| include: false

library(magrittr)
library(data.table) 
library(dplyr)
library(collapse)
library(microbenchmark)

```


## load file

09-15년 공단 건강검진 데이터에서 실습용으로 32명을 뽑은 자료를 이용하겠습니다.

```{r}
#| eval: false
#| echo: true

# Exam data: 09-15

dt <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")
df <- read.csv("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")

```

------------------------------------------------------------------------

# 2. collapse 패키지

-   자주 사용하는 연산 위주로 **collapse**와 **data.table**을 비교하여 파악해보겠습니다.

**collapse**패키지는 **dplyr**패키지와 유사한 함수들이 존재합니다.주로 **dplyr** 함수명 앞에 "f"를 붙여 쓰입니다. 예를 들면, **dplyr::select()**와 **collapse::fselect()**, **collapse::fgroup_by()**와 **dplyr::group_by()**등 기능적으로 유사한 부분이 있지만, 속도 면에서 **collapse**가 월등한 수준을 보입니다. 속도에 대한 자료는 뒷부분에서 확인할 수 있기 때문에, 우선 자주 사용하고 익숙한 **data.table**을 코드를 통해 **collapse**패키지를 알아보도록 하겠습니다.

## load

-   **collapse**는 데이터를 불러오는 함수가 존재하지 않기 때문에, **data.table**를 이용하여 읽습니다.

-   **fselect()**는 컬럼명을 명시하거나 인덱스를 전달하면 원하는 컬럼을 불러올 수 있습니다.

```{r}
#| eval: false
#| echo: true

## data.table(Only specific column)
dt1 <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv",select = c("EXMD_BZ_YYYY", "RN_INDI", "HME_YYYYMM"))
dt2 <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv", select = 1:5)
dt3 <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv", drop = 6:10)

## collapse(Only specific column)
dt4 <- fselect(fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv"),EXMD_BZ_YYYY, RN_INDI, HME_YYYYMM)
dt5 <- fselect(fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv"),1:5)
dt6 <- fselect(fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv"),-(6:10)) 

```

-   예시로 **dt6**를 확인해보면, **dt3**와 마찬가지로 인덱스 6부터 10까지 제외되서 출력된 것을 볼 수 있습니다.

```{r}
#| eval: false
#| echo: true

dt3

```

```{r}
#| echo: false

rmarkdown::paged_table(fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv", drop = 6:10))

```

```{r}
#| eval: false
#| echo: true

dt6

```

```{r}
#| echo: false

rmarkdown::paged_table(fselect(fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv"),-(6:10)))

```

------------------------------------------------------------------------

## row

-   **collapse::fselect**와 **dplyr::select**는 유사하지만 **fselect**가 x100배 정도 빠릅니다.

-   **ss()**함수는 컬럼명이 아닌 인덱스로 행,열을 출력을 할 때 사용합니다. **fsubset()** 보다 빠르지만 기능이 제한적이기 떄문에 간단한 행,열 출력할 때 사용가능합니다.

```{r}
#| eval: false
#| echo: true

## data.table(row)
dt[1:10]
dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)]
dt[order(HME_YYYYMM)]
dt[order(HME_YYYYMM, -HGHT)]
dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)][order(HGHT)]        
dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)] %>% .[order(HGHT)]  #same

## collapse(row)                                       
fsubset(dt, 1:10)                                                   #ss(dt,1:10)
fsubset(dt, EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25 )               
roworder(dt, HME_YYYYMM)                                            
roworder(dt, HME_YYYYMM, -HGHT)
roworder(dt, HGHT) %>% fsubset(EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25)

```

-   예시로 두번째 코드와 다섯번째 코드를 확인해보겠습니다.

**두번째**

```{r}
#| eval: false
#| echo: true

fsubset(dt, EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25 ) 

```

```{r}
#| echo: false

dt <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")

rmarkdown::paged_table(fsubset(dt, EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25 ))

```

```{r}
#| eval: false
#| echo: true

dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)]

```

```{r}
#| echo: false

rmarkdown::paged_table(dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)])

```

**다섯번째**

```{r}
#| eval: false
#| echo: true

dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)][order(HGHT)] 

```

```{r}
#| echo: false

rmarkdown::paged_table(dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)][order(HGHT)])

```

```{r}
#| eval: false
#| echo: true

roworder(dt, HGHT) %>% fsubset(EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25) 

```

```{r}
#| echo: false

rmarkdown::paged_table(roworder(dt, HGHT) %>% fsubset(EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25))

```

------------------------------------------------------------------------

## column

-   열 이름을 정규식으로 선택하기 위해서는 **fselect()**가 아니라 **get_vars()** 함수를 이용해야합니다. **regex = TRUE** 정규식을 사용하겠다는 의미이고 **return = "names"** 컬럼명을 출력하겠다는 의미입니다. **get_var()**는 **fselect()**함수와 유사하지만, 수행속도가 좀 더 빠르며 벡터, 정수 형태로 값을 전달합니다.

-   유의사항은 컬럼명을 리스트로 전달하면 ERROR 발생합니다.

-   **fsubset**는 빠르고 부분적인 작업을 위해 **base::subset** 패키지 의 C 함수를 사용하는 향상된 버전입니다.

```{r}
#| eval: false
#| echo: true

## data.table(column)
dt[, 1:10]
dt[, c("HGHT", "WGHT")]
dt[, .(HGHT, WGHT)]
dt[, .(Height = HGHT, Weight = WGHT)]   
dt[, .(HGHT)] 
dt[, "HGHT"]
colvars1 <- grep("Q_", names(dt), value = T)
dt[, ..colvars1]
dt[, colvars1, with = FALSE]      
dt[, .SD, .SDcols = colvars1]     
dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25), ..colvars]
dt[, !..colvars1]
dt[, -..colvars1]
dt[, .SD, .SDcols = -colvars1]

## collapse(column)
fselect(dt, 1:10)                 
fselect(dt, c("HGHT", "WGHT"))    #get_vars(dt, 1:10)
fselect(dt, HGHT, WGHT)           #get_vars(dt, c("HGHT", "WGHT"))
fselect(dt, Height = HGHT, Weight = WGHT)
fselect(dt, .(HGHT))              #ERROR
fselect(dt, "HGHT")
colvars2 <-get_vars(dt, "Q_", regex = TRUE, return = "names")    #regex = TRUE 정규식 사용/ return = "names" 컬럼명 출력
fselect(dt, colvars2)                                            #fselect(dt, c(colvars))
get_vars(dt, colvars2)                                           #get_var(dt, c(colvars))
fsubset(dt,EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25, colvars2)
fselect(dt, -(4:12))
fselect(dt, -(Q_PHX_DX_STK:Q_DRK_FRQ_V09N))

```

-   예시로 같은 값을 출력하는지 확인해 보겠습니다.

```{r}

colvars1 <- grep("Q_", names(dt), value = T)

qDT(colvars1)

```

```{r}

colvars2 <-get_vars(dt, "Q_", regex = TRUE, return = "names")

qDT(colvars2)

```

```{r}
#| eval: false
#| echo: true

dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25), ..colvars1]

```

```{r}
#| echo: false

rmarkdown::paged_table(dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25), ..colvars1])

```

```{r}
#| eval: false
#| echo: true

fsubset(dt,EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25, colvars2)

```

```{r}
#| echo: false

rmarkdown::paged_table(fsubset(dt,EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25, colvars2))

```

------------------------------------------------------------------------

## Column summary

-   **fmean**는 (열별) 평균을 계산하고, (선택적으로) 그룹화 및 가중치를 계산하는 일반적인 함수입니다.

-   **dapply**는 데이터에 대한 정보(속성)를 잃거나 데이터의 클래스 또는 형식을 변경하지 않고 데이터의 행이나 열에 함수를 적용하는 효율적인 함수입니다.

```{r}
#| eval: false
#| echo: true

## data.tanble(Column summary)
dt[, .(HGHT = mean(HGHT), WGHT = mean(WGHT), BMI = mean(BMI))] 

dt[, lapply(.SD, mean), .SDcols = c(13, 14, 16)]

#collapse(Column summary)
fselect(dt,HGHT,WGHT,BMI) %>% fmean()     #fmean(fselect(dt,HGHT,WGHT,BMI))

dapply(fselect(dt,HGHT,WGHT,BMI),fmean)

```

-   두번째 코드를 비교해보겠습니다.

```{r}
#| eval: false
#| echo: true

dt[, lapply(.SD, mean), .SDcols = c(13, 14, 16)]

```

```{r}
#| echo: false

knitr::kable(dt[, lapply(.SD, mean), .SDcols = c(13, 14, 16)])

```

```{r}
#| eval: false
#| echo: true

dapply(fselect(dt,HGHT,WGHT,BMI),fmean)

```

```{r}
#| echo: false

knitr::kable(qDF(dapply(fselect(dt,HGHT,WGHT,BMI),fmean)))

```

------------------------------------------------------------------------

## By

-   **collap()**는 'Fast Statistical Functions' 사용하여 각 컬럼에 여러 함수를 적용할 수 있습니다.(#Fast Statistical Functions: fsum, fprod, fmean, fmedian, fmode, fvar, fsd, fmin, fmax, fnth, ffirst, flast, fnobs, fndistinct)

-   **add_stub()** 연산을 통해 열을 추가할 수 있는 명령입니다. ""를 통해 열 이름을 설정할 수 있습니다.

```{r}
#| eval: false
#| echo: true

##data.table(By)
dt[, .(HGHT = mean(HGHT), WGHT = mean(WGHT), BMI = mean(BMI)), by = EXMD_BZ_YYYY]
dt[, .(HGHT = mean(HGHT), WGHT = mean(WGHT), BMI = mean(BMI)), by = "EXMD_BZ_YYYY"]  #same
dt[, lapply(.SD, mean), .SDcols = c("HGHT", "WGHT", "BMI"), by = EXMD_BZ_YYYY]       #same
dt[HGHT >= 175, .N, by= .(EXMD_BZ_YYYY, Q_SMK_YN)]        
dt[HGHT >= 175, .N, by= c("EXMD_BZ_YYYY", "Q_SMK_YN")]                               #same
dt[HGHT >= 175, .N, keyby= c("EXMD_BZ_YYYY", "Q_SMK_YN")]                            #same(정렬)

#collapse(By)                                                  
collap(dt, ~ EXMD_BZ_YYYY, fmean, cols = c(13,14,16))                                # ~ ≒ by
fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY)                       #same
add_stub(count(fsubset(dt, HGHT >= 175, EXMD_BZ_YYYY,Q_SMK_YN),EXMD_BZ_YYYY,Q_SMK_YN),"N")  #dplyr::count()

```

-   마지막 코드를 비교해보겠습니다. 결측치 값의 정렬 순서의 차이가 있지만, 같은 기능을 수행할 수 있습니다.

```{r}
#| eval: false
#| echo: true

dt[HGHT >= 175, .N, keyby= c("EXMD_BZ_YYYY", "Q_SMK_YN")]

```

```{r}
#| echo: false

rmarkdown::paged_table(dt[HGHT >= 175, .N, keyby= c("EXMD_BZ_YYYY", "Q_SMK_YN")])

```

```{r}
#| eval: false
#| echo: true

add_stub(count(fsubset(dt, HGHT >= 175, EXMD_BZ_YYYY,Q_SMK_YN),EXMD_BZ_YYYY,Q_SMK_YN),"N")

```

```{r}
#| echo: false

rmarkdown::paged_table(add_stub(count(fsubset(dt, HGHT >= 175, EXMD_BZ_YYYY,Q_SMK_YN),EXMD_BZ_YYYY,Q_SMK_YN),"N"))

```

------------------------------------------------------------------------

## New variable

-   **ftransform** 새 열을 계산하거나 기존 열을 수정 및 삭제하는 데 사용할 수 있으며 항상 전체 데이터 프레임을 반환합니다.

-   **ftransform**은 base::transform 데이터 프레임 및 목록 의 향상된 버전입니다.

```{r}
#| eval: false
#| echo: true

## data.table(New variable)
dt[, BMI2 := round(WGHT/(HGHT/100)^2, 1)]

dt[, `:=`(BP_SYS140 = factor(as.integer(BP_SYS >= 140)), BMI25 = factor(as.integer(BMI >= 25)))]

dt[, BMI2 := NULL]

## collapse(New variable)
ftransform(dt, BMI2 = round(WGHT/(HGHT/100)^2, 1))

ftransform(dt,BP_SYS140 = factor(as.integer(BP_SYS >= 140)),BMI25 = factor(as.integer(BMI >= 25)))

ftransform(dt, BMI2 = NULL)

```

-   첫번째와 두번째 코드를 확인해보겠습니다.

-   **data.table**

```{r}
#| echo: false

dt <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")

rmarkdown::paged_table(dt[, BMI2 := round(WGHT/(HGHT/100)^2, 1)])

rmarkdown::paged_table(dt[, `:=`(BP_SYS140 = factor(as.integer(BP_SYS >= 140)), BMI25 = factor(as.integer(BMI >= 25)))])

rm(dt)
```

-   **collapse**

```{r}
#| echo: false

dt <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")

rmarkdown::paged_table(ftransform(dt, BMI2 = round(WGHT/(HGHT/100)^2, 1)))

rmarkdown::paged_table(ftransform(dt,BP_SYS140 = factor(as.integer(BP_SYS >= 140)),BMI25 = factor(as.integer(BMI >= 25))))

rm(dt)

```

------------------------------------------------------------------------

## Specific symbol .N, .SD, .SDcols

```{r}
#| eval: false
#| echo: true

## data.table(Specific symbol .N, .SD, .SDcols)
dt[, .SD]

dt[, lapply(.SD, class)]

dt[, .N, keyby = "RN_INDI"]

## collapse
fselect(dt,1:32)

dapply(dt,class)

add_stub(count(dt,RN_INDI),"N")

```

-   두번째 코드를 비교해보겠습니다. 비슷하지만 출력하는 형태가 다릅니다. **class()**를 사용하여 확인해보면 형태가 다른 것을 알 수 있습니다.

```{r}
#| eval: false
#| echo: true

dt[, lapply(.SD, class)]

```

```{r}
#| echo: false

dt <- fread("https://raw.githubusercontent.com/jinseob2kim/lecture-snuhlab/master/data/example_g1e.csv")

rmarkdown::paged_table(dt[, lapply(.SD, class)])

```

```{r}
#| eval: false
#| echo: true

dapply(dt,class)

```

```{r}
#| echo: false

rmarkdown::paged_table(qDF(dapply(dt,class)))

```

```{r}
#| echo: true

class(dt[, lapply(.SD, class)])

class(dapply(dt,class))

```

------------------------------------------------------------------------

## order

```{r}
#| eval: false
#| echo: true

#data.table(order)
dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(BMI)]

dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(-BMI)]

#collapse(order)
fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(BMI)

fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(-BMI)

```

-   첫번째 코드를 통해 **data.table**과 **collapse** 출력 결과를 확인해보겠습니다.

```{r}
#| eval: false
#| echo: true

dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(BMI)]

```

```{r}
#| echo: false

rmarkdown::paged_table(dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(BMI)])

```

```{r}
#| eval: false
#| echo: true

fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(BMI)

```

```{r}
#| echo: false

rmarkdown::paged_table(fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(BMI))

```

------------------------------------------------------------------------

# 3. 벤치마킹

-   모든 벤치마크는 1.6GHZ Intel i5 프로세서, 16GB DDR4 RAM및 sk hynix sc308 ssd가 탑재된 Windows 10 노트북에서 실행됩니다.

## 기본 행 연산

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[1:10] ,
               collapse = fsubset(dt, 1:10))

microbenchmark(data.table = dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)],
               collapse = fsubset(dt, EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25 ))

microbenchmark(data.table = dt[order(HME_YYYYMM, -HGHT)],
               collapse = roworder(dt, HME_YYYYMM, -HGHT))

microbenchmark(data.table = dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25)][order(HGHT)],
               collapse = roworder(dt, HGHT) %>% fsubset(EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25))

```

------------------------------------------------------------------------

## 기본 열 연산

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[, 1:10],
               collapse = fselect(dt, 1:10))

microbenchmark(data.table = dt[, .(Height = HGHT, Weight = WGHT)],
               collapse = fselect(dt, Height = HGHT, Weight = WGHT))

#base::grep() more faster 
microbenchmark(data.table = colvars <- grep("Q_", names(dt), value = T),
               collapse = colvars <-get_vars(dt, "Q_",regex = TRUE, return = "names"))

microbenchmark(data.table = dt[, ..colvars],
               collapse = get_vars(dt, colvars))

microbenchmark(data.table = dt[, ..colvars],
               collapse = fselect(dt, colvars) )

microbenchmark(data.table = dt[(EXMD_BZ_YYYY %in% 2009:2012) & (BMI >= 25), ..colvars],
               collapse = fsubset(dt,EXMD_BZ_YYYY %in% 2009:2012 & BMI >= 25, colvars))


```

------------------------------------------------------------------------

## 평균 연산

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[, .(mean(HGHT), mean(WGHT), mean(BMI))],
               collapse = fmean(fselect(dt,HGHT,WGHT,BMI)))

microbenchmark(data.table = dt[, .(HGHT = mean(HGHT), WGHT = mean(WGHT), BMI = mean(BMI))],
               collaspe = fmean(fselect(dt,HGHT,WGHT,BMI)))

microbenchmark(data.table = dt[, lapply(.SD, mean), .SDcols = c(13, 14, 16)],
               collapse = dapply(fselect(dt,HGHT,WGHT,BMI),fmean))

```

------------------------------------------------------------------------

## 그룹별 통계 연산

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[, .(HGHT = mean(HGHT), WGHT = mean(WGHT), BMI = mean(BMI)), by = EXMD_BZ_YYYY],
               collapse.collap = collap(dt, ~ EXMD_BZ_YYYY, fmean, cols = c(13,14,16)),
               collapse.fmean = fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY))

microbenchmark(data.table = dt[, lapply(.SD, mean), .SDcols = c("HGHT", "WGHT", "BMI"), by = EXMD_BZ_YYYY],
               collapse = fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY))

#data.table more faster
microbenchmark(data.table = dt[HGHT >= 175, .N, by= .(EXMD_BZ_YYYY, Q_SMK_YN)],
               collapse = add_stub(count(fsubset(dt, HGHT >= 175, EXMD_BZ_YYYY,Q_SMK_YN),EXMD_BZ_YYYY,Q_SMK_YN),"N") )

```

------------------------------------------------------------------------

## 특수 심볼

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[, .SD],
               collapse = fselect(dt,1:32))

microbenchmark(data.table = dt[, lapply(.SD, class)],
               collapse = dapply(dt,class))

#data.table more faster
microbenchmark(data.table = dt[, .N, keyby = "RN_INDI"],
               collapse = add_stub(count(dt,RN_INDI),"N"))

```

------------------------------------------------------------------------

## 정렬 연산

```{r}
#| echo: true

## benchmarking
microbenchmark(data.table = dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(BMI)],
               collapse = fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(BMI))

microbenchmark(data.table = dt[, .(HGHT=mean(HGHT), WGHT=mean(WGHT), BMI=mean(BMI)), by=EXMD_BZ_YYYY] [order(-BMI)],
               collapse = fmean(fselect(dt,EXMD_BZ_YYYY,HGHT,WGHT,BMI), dt$EXMD_BZ_YYYY) %>% roworder(-BMI))

```

------------------------------------------------------------------------

# 4. 마치며

1.  **collapse**는 **dplyr** ,**data.table** 과 유사한 기능을 가지고 더 빠른 수행 속도를 발현할 수 있습니다.

2.  **collapse**는 데이터를 불러오는 함수가 존재하지 않기 때문에, **data.table::fread()**를 이용하여 읽습니다.

3.  **get_var()**는 **fselect()**함수와 유사하지만, 수행속도가 좀 더 빠릅니다.

4.  **'roworder'**는 "-변수"를 내림차순 정렬로 출력합니다.

5.  **'fmeans'**은 열별 평균뿐만 아니라, 그룹별 평균과 가중치 평균을 계산할 수 있습니다.

6.  위에 벤치마킹에서 확인 할 수 있는 것처럼 대부분은 **collapse**패키지의 수행속도가 빠르지만 문자열을 통한 열 선택은 **base::grep()**이 조금 더 빠른 것을 확인 할 수 있습니다.
